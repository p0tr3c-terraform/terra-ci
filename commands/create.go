package commands

import (
	"bytes"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"text/template"

	"github.com/p0tr3c/terra-ci/config"
	"github.com/p0tr3c/terra-ci/logs"

	"github.com/spf13/cobra"
)

const (
	terragruntWorkspaceConfig = `# Automatically generated by terra-ci
inputs = {}

terraform {
  source = "{{ .ModuleLocation }}"
}

include {
  path = find_in_parent_folders()
}`
)

type UserInputError string

func (e UserInputError) Error() string {
	return string(e)
}

const (
	ErrPositionalArgument UserInputError = "invalid positional argument"
)

func NewCreateCommand(in io.Reader, out, outErr io.Writer) *cobra.Command {
	command := &cobra.Command{
		Use:   "create",
		Short: "Creates terra-ci resource type",
		Run:   runHelp,
	}
	SetCommandBuffers(command, in, out, outErr)
	command.AddCommand(NewCreateWorkspaceCommand(in, out, outErr))
	return command
}

func NewCreateWorkspaceCommand(in io.Reader, out, outErr io.Writer) *cobra.Command {
	command := &cobra.Command{
		Use:   "workspace",
		Short: "Creates new terragrunt workspace",
		Run:   runCreateWorkspace,
	}
	SetCommandBuffers(command, in, out, outErr)

	command.Flags().String("path", "", "Full path to the workspace")
	command.MarkFlagRequired("path")
	command.Flags().String("module-location", "", "String referencing base of terragrunt module")
	return command
}

type TerragruntConfigParameters struct {
	ModuleLocation string
}

func runCreateWorkspace(cmd *cobra.Command, args []string) {
	logs.Logger.Debug("start")
	defer logs.Logger.Debug("end")

	workspacePath, err := cmd.Flags().GetString("path")
	if err != nil {
		logs.Logger.Error("path flag is missing")
		return
	}

	workspaceName := filepath.Base(workspacePath)
	moduleLocation, _ := cmd.Flags().GetString("module-location")
	if moduleLocation == "" {
		if config.DefaultModuleLocation == "" {
			logs.Logger.Error("missing module location to implement",
				"location", moduleLocation)
			cmd.PrintErrf("specify module-location flag or configure default module location\n")
			return
		}
		moduleLocation = config.DefaultModuleLocation
	}

	// Create workspace directory
	if err := os.MkdirAll(workspacePath, 0755); err != nil {
		logs.Logger.Debug("failed to create workspace",
			"name", workspaceName,
			"path", workspacePath,
			"mode", 0755,
			"error", err)
		cmd.PrintErrf("failed to create workspace %s\n", workspaceName)
		return
	}
	// Template workspace config
	inputParams := &TerragruntConfigParameters{
		ModuleLocation: moduleLocation,
	}
	tpl, err := template.New("terragruntConfig").Parse(terragruntWorkspaceConfig)
	if err != nil {
		logs.Logger.Error("failed to parse template",
			"error", err)
		cmd.PrintErrf("failed to create workspace %s\n", workspaceName)
		return
	}
	var templatedTerragruntConfig bytes.Buffer
	if err := tpl.Execute(&templatedTerragruntConfig, inputParams); err != nil {
		logs.Logger.Error("failed to execute template",
			"error", err)
		cmd.PrintErrf("failed to create workspace %s\n", workspaceName)
		return
	}
	if err := ioutil.WriteFile(filepath.Join(workspacePath, "terragrunt.hcl"),
		templatedTerragruntConfig.Bytes(), 0644); err != nil {
		logs.Logger.Error("failed to write terragrunt config",
			"path", workspacePath,
			"error", err)
		cmd.PrintErrf("failed to create workspace %s\n", workspaceName)
		return
	}
	// Template workspace CI
}
